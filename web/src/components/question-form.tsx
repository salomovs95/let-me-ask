import { useState } from 'react'
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { z } from 'zod'

import { usePostQuestion } from '../http/use-post-question'
import { Button } from './ui/button'
import { QuestionAnswerDialog } from './question-answer-dialog'
import { Textarea } from './ui/textarea'

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from './ui/card'

import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from './ui/form'

// Esquema de validação no mesmo arquivo conforme solicitado
const createQuestionSchema = z.object({
  question: z
    .string()
    .min(1, 'Question is mandatory!')
    .min(10, 'Question must have at least 10 characters')
    .max(500, 'Question must have at most 500 characters length'),
})

type CreateQuestionFormData = z.infer<typeof createQuestionSchema>

interface QuestionFormProps {
  roomSlug: string
}

export function QuestionForm({ roomSlug }: QuestionFormProps) {
  const [ dialogOpen, toggleDialogOpen ] = useState<boolean>(false)
  const [ dialogText, setDialogText ] = useState<string>('')
  const { mutateAsync: createQuestion } = usePostQuestion<CreateQuestionFormData>(`/rooms/${roomSlug}/questions`, roomSlug)

  const form = useForm<CreateQuestionFormData>({
    resolver: zodResolver(createQuestionSchema),
    defaultValues: {
      question: '',
    },
  })

  async function handleCreateQuestion(data: CreateQuestionFormData) {
    const res = await createQuestion(data)

    if (!!res.data.answer && res.data.answer.startsWith('Não possuo informações suficientes para responder')) {
      setDialogText(res.data.answer)
      toggleDialogOpen(true)
    }

    form.reset()
  }

  const { isSubmitting } = form.formState

  return (
    <>
    <QuestionAnswerDialog
      open={dialogOpen}
      title="AI Says:"
      text={dialogText}
      onClose={toggleDialogOpen}
    />

    <Card>
      <CardHeader>
        <CardTitle>Ask a question</CardTitle>
        <CardDescription>
          Place your question below to receive an answer generated by A.I.
        </CardDescription>
      </CardHeader>

      <CardContent>
        <Form {...form}>
          <form
            className="flex flex-col gap-4"
            onSubmit={form.handleSubmit(handleCreateQuestion)}
          >
            <FormField
              control={form.control}
              name="question"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Your question</FormLabel>
                  <FormControl>
                    <Textarea
                      className="min-h-[100px]"
                      disabled={isSubmitting}
                      placeholder="What do you wanna know?"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <Button disabled={isSubmitting} type="submit">
              Ask something
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
    </>
  )
}
